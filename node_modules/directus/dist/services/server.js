"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerService = void 0;
const database_1 = __importDefault(require("../database"));
const os_1 = __importDefault(require("os"));
// @ts-ignore
const package_json_1 = require("../../package.json");
const macos_release_1 = __importDefault(require("macos-release"));
const settings_1 = require("./settings");
class ServerService {
    constructor(options) {
        this.knex = options.knex || database_1.default;
        this.accountability = options.accountability || null;
        this.schema = options.schema;
        this.settingsService = new settings_1.SettingsService({ knex: this.knex, schema: this.schema });
    }
    serverInfo() {
        var _a;
        return __awaiter(this, void 0, void 0, function* () {
            const info = {};
            const projectInfo = yield this.settingsService.readSingleton({
                fields: [
                    'project_name',
                    'project_logo',
                    'project_color',
                    'public_foreground',
                    'public_background',
                    'public_note',
                    'custom_css',
                ],
            });
            info.project = projectInfo;
            if (((_a = this.accountability) === null || _a === void 0 ? void 0 : _a.admin) === true) {
                const osType = os_1.default.type() === 'Darwin' ? 'macOS' : os_1.default.type();
                const osVersion = osType === 'macOS' ? `${macos_release_1.default().name} (${macos_release_1.default().version})` : os_1.default.release();
                info.directus = {
                    version: package_json_1.version,
                };
                info.node = {
                    version: process.versions.node,
                    uptime: Math.round(process.uptime()),
                };
                info.os = {
                    type: osType,
                    version: osVersion,
                    uptime: Math.round(os_1.default.uptime()),
                    totalmem: os_1.default.totalmem(),
                };
            }
            return info;
        });
    }
}
exports.ServerService = ServerService;
